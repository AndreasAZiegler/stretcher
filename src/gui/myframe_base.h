//
// This file was automatically generated by wxrc, do not edit by hand.
//

#ifndef __myframe_base_h__
#define __myframe_base_h__

#include <wx/notebook.h>
#include <wx/panel.h>
#include <wx/stattext.h>
#include <wx/button.h>
#include <wx/spinctrl.h>
#include <wx/radiobox.h>
#include <wx/radiobut.h>
#include <wx/checkbox.h>
#include <wx/listbox.h>
#include <wx/scrolwin.h>
#include <wx/listctrl.h>
#include <wx/filepicker.h>
#include <wx/choice.h>
#include <mathplot.h>
#include <wx/xrc/xmlres.h>

class MyFrame_Base : public wxFrame {
protected:
 wxNotebook* m_Experiments;
 wxPanel* m_InitializePanel;
 wxStaticText* m_InitializeStaticText1;
 wxButton* m_InitializeLoadStoredPositionButton;
 wxStaticText* InitializeStaticText2;
 wxStaticText* m_InitializeWarningStaticText;
 wxButton* m_InitializeHomeMotorsButton;
 wxPanel* m_ClampingPosPanel;
 wxStaticText* m_ClampingPositionStaticText;
 wxSpinCtrlDouble* m_ClampingPositionSpinCtrl;
 wxButton* m_ClampingPositionButton;
 wxPanel* m_PreloadPanel;
 wxRadioBox* m_PreloadUnitRadioBox;
 wxPanel* m_PreloadCalculateDiameterPanel;
 wxCheckBox* m_PreloadCalculateCrosssectionCheckBox;
 wxStaticText* m_PreloadYStaticText;
 wxSpinCtrlDouble* m_PreloadYSpinCtrl;
 wxRadioBox* m_PreloadXRadioBox;
 wxSpinCtrlDouble* m_PreloadXSpinCtrl;
 wxStaticText* m_PreloadLimitStaticText;
 wxSpinCtrlDouble* m_PreloadLimitSpinCtrl;
 wxStaticText* m_PreloadSpeedStaticText;
 wxPanel* m_PreloadSpeedPanel;
 wxSpinCtrlDouble* m_PreloadSpeedPreloadSpinCtrl;
 wxStaticText* m_PreloadSpeedPreloadStaticText;
 wxSpinCtrlDouble* m_PreloadSpeedMmSpinCtrl;
 wxStaticText* m_PreloadSpeedMmStaticText;
 wxButton* m_PreloadCancelButton;
 wxButton* m_PreloadSendButton;
 wxPanel* m_ConditioningPanel;
 wxStaticText* m_ConditioningCyclesStaticText;
 wxSpinCtrl* m_ConditioningCyclesSpinCtrl;
 wxStaticText* m_ConditioningSpeedStaticText;
 wxPanel* m_ConditioningSpeedPanel;
 wxSpinCtrlDouble* m_ConditioningSpeedPreloadSpinCtrl;
 wxStaticText* m_ConditioningSpeedPreloadStaticText;
 wxSpinCtrlDouble* m_ConditioningSpeedMmSpinCtrl;
 wxStaticText* m_ConditioningSpeedMMStaticText;
 wxStaticText* m_ConditioningStressForceLimitStaticText;
 wxSpinCtrlDouble* m_ConditioningStressForceLimitSpinCtrl;
 wxRadioButton* m_ConditioningStressRadioBtn;
 wxRadioButton* m_ConditioningDistanceRadioBtn;
 wxStaticText* m_ConditioningDistanceLimitStaticText;
 wxSpinCtrlDouble* m_ConditioningDistanceLimitSpinCtrl;
 wxRadioBox* m_ConditioningDisctanceLimitRadioBox;
 wxButton* m_ConditioningCancelButton;
 wxButton* m_ConditioningSendButton;
 wxPanel* m_Ramp2FailurePanel;
 wxStaticText* m_R2FSpeedStaticText;
 wxPanel* m_R2FSpeedPanel;
 wxSpinCtrlDouble* m_R2FSpeedPreloadSpinCtrl;
 wxStaticText* m_R2FSpeedPreloadStaticText;
 wxSpinCtrlDouble* m_R2FSpeedMmSpinCtrl;
 wxStaticText* m_R2FSpeedMmStaticText;
 wxStaticText* m_R2FDropBStopStaticText;
 wxSpinCtrlDouble* m_R2FDropBStopSpinCtrl;
 wxStaticText* m_R2FAfterFailureStaticText;
 wxRadioBox* m_R2FAfterFailureRadioBox;
 wxSpinCtrlDouble* m_R2FGoToSpinCtrl;
 wxRadioBox* m_R2FGoToRadioBox;
 wxButton* m_R2FCancelButton;
 wxButton* m_R2FSendButton;
 wxPanel* m_RelaxationPanel;
 wxStaticText* m_RelaxationRampStaticText;
 wxSpinCtrlDouble* m_RelaxationRampSpinCtrl;
 wxRadioBox* m_RelaxationRampRadioBox;
 wxStaticText* m_staticText321;
 wxStaticText* m_RelaxationPauseStaticText;
 wxSpinCtrlDouble* m_RelaxationPauseSpinCtrl;
 wxStaticText* m_RelaxationStepsStaticText;
 wxSpinCtrl* m_RelaxationStepsSpinCtrl;
 wxButton* m_RelaxationCancelButton;
 wxButton* m_RelaxationSendButton;
 wxPanel* m_CreepPanel;
 wxStaticText* m_CreepSpeedStaticText;
 wxPanel* m_CreepSpeedPanel;
 wxSpinCtrlDouble* m_CreepSpeedPreloadSpinCtrl;
 wxStaticText* m_CreepSpeedPreloadStaticText;
 wxSpinCtrlDouble* m_CreepSpeedMmSpinCtrl;
 wxStaticText* m_CreepSpeedMmStaticText;
 wxStaticText* m_CreepHoldForceStressStaticText;
 wxSpinCtrlDouble* m_CreepHoldForceStressSpinCtrl;
 wxStaticText* m_CreepHoldTimeStaticText;
 wxSpinCtrlDouble* m_CreepHoldTimeSpinCtrl;
 wxStaticText* m_CreepSensitivityStaticText;
 wxSpinCtrlDouble* m_CreepSensitivitySpinCtrl;
 wxButton* m_CreepCancelButton;
 wxButton* m_CreepSendButton;
 wxPanel* m_FatiguePanel;
 wxStaticText* m_FatigueCyclesStaticText;
 wxSpinCtrl* m_FatigueCyclesSpinCtrl;
 wxStaticText* m_FatigueTotalTimeStaticText;
 wxSpinCtrlDouble* m_FatigueTotalTimeSpinCtrl;
 wxStaticText* m_FatigueAmplitudeTimeStaticText;
 wxSpinCtrlDouble* m_FatigueAmplitudeSpinCtrl;
 wxRadioBox* m_FatigueAmplitudeRadioBox;
 wxStaticText* m_staticText33;
 wxStaticText* m_FatigueRestTimeStaticText;
 wxSpinCtrlDouble* m_FatigueRestTimeSpinCtrl;
 wxStaticText* m_FatigueFrequencyStaticText;
 wxSpinCtrlDouble* m_FatigueFrequencySpinCtrl;
 wxCheckBox* m_FatigueLoopCheckBox;
 wxButton* m_FatigueCancelButton;
 wxButton* m_FatigueSendButton;
 wxPanel* m_ChamberStretchPanel;
 wxFlexGridSizer* m_ChamberStretchSizer1;
 wxRadioBox* m_ChamberStretchMeasurementRadioBox;
 wxPanel* m_ChamberStretchGelPanel;
 wxStaticText* m_ChamberStretchEmodLeftStaticText;
 wxSpinCtrlDouble* m_ChamberStretchEmodLeftSpinCtrl;
 wxStaticText* m_ChamberStretchEmodRightStaticText;
 wxSpinCtrlDouble* m_ChamberStretchEmodRightSpinCtrl;
 wxStaticText* m_ChamberStretchStrinStaticText;
 wxSpinCtrlDouble* m_ChamberStretchStrainSpinCtrl;
 wxStaticText* m_ChamberStretchFreqStaticText;
 wxSpinCtrlDouble* m_ChamberStretchFreqSpinCtrl;
 wxStaticText* m_ChamberStretchAmplStaticText;
 wxSpinCtrlDouble* m_ChamberStretchAmplSpinCtrl;
 wxStaticText* m_ChamberStretchRateStaticText;
 wxSpinCtrlDouble* m_ChamberStretchRateSpinCtrl;
 wxStaticText* m_ChamberStretchPauseStaticText;
 wxSpinCtrlDouble* m_ChamberStretchPauseSpinCtrl;
 wxCheckBox* m_ChamberStretchImageCheckBox;
 wxPanel* m_ChamberStretchCellsPanel;
 wxStaticText* m_ChamberStretchCyclesStaticText1;
 wxSpinCtrl* m_ChamberStretchCyclesSpinCtrl1;
 wxStaticText* m_ChamberStretchTotalTimeStaticText1;
 wxSpinCtrlDouble* m_ChamberStretchTotalTimeSpinCtrl1;
 wxStaticText* m_ChamberStretchAmplitudeTimeStaticText1;
 wxSpinCtrlDouble* m_ChamberStretchAmplitudeSpinCtrl1;
 wxRadioBox* m_ChamberStretchAmplitudeRadioBox1;
 wxStaticText* m_ChamberStretchText331;
 wxStaticText* m_ChamberStretchRestTimeStaticText1;
 wxSpinCtrlDouble* m_ChamberStretchRestTimeSpinCtrl1;
 wxStaticText* m_ChamberStretchFrequencyStaticText1;
 wxSpinCtrlDouble* m_ChamberStretchFrequencySpinCtrl1;
 wxCheckBox* m_ChamberStretchLoopCheckBox1;
 wxButton* m_ChamberStretchCancelButton;
 wxButton* m_ChamberStretchSendButton;
 wxButton* m_DecreaseDistanceButton;
 wxButton* m_IncreaseDistanceButton;
 wxButton* m_StopButton;
 wxStaticText* m_ForceStaticText;
 wxStaticText* m_DistanceStaticText;
 wxPanel* m_Protocols;
 wxListBox* m_ProtocolsListBox;
 wxPanel* m_ProtocolsNavigationPanel;
 wxButton* m_ProtocolsExperiment1Button;
 wxStaticText* m_staticText32;
 wxButton* m_ProtocolsPauseButton;
 wxButton* m_ProtocolsExperiment2Button;
 wxButton* m_ProtocolsUpButton;
 wxButton* m_ProtocolsPhotoButton;
 wxButton* m_ProtocolsExperiment3Button;
 wxButton* m_ProtocolsXButton;
 wxStaticText* m_staticText324;
 wxButton* m_ProtocolsExperiment4Button;
 wxButton* m_ProtocolsDownButton;
 wxStaticText* m_staticText325;
 wxButton* m_ProtocolsExperiment5Button;
 wxCheckBox* m_checkBox3;
 wxStaticText* m_staticText326;
 wxButton* m_ProtocolsRunButton;
 wxButton* m_ProtocolsStopButton;
 wxButton* m_ProtocolsSaveButton;
 wxScrolledWindow* m_Results;
 wxListCtrl* m_ResultListCtrl;
 wxButton* m_ResultSaveButton;
 wxPanel* m_GraphPanel;
 wxBoxSizer* m_GraphSizer1;
 wxBoxSizer* m_GraphSizer2;
 wxButton* m_GraphExportCSVButton;
 wxButton* m_GraphExportPNGButton;
 wxButton* m_GraphClearButton;

private:
 void InitWidgetsFromXRC(wxWindow *parent){
  wxXmlResource::Get()->LoadObject(this,parent,wxT("MyFrame_Base"), wxT("wxFrame"));
  m_Experiments = XRCCTRL(*this,"m_Experiments",wxNotebook);
  m_InitializePanel = XRCCTRL(*this,"m_InitializePanel",wxPanel);
  m_InitializeStaticText1 = XRCCTRL(*this,"m_InitializeStaticText1",wxStaticText);
  m_InitializeLoadStoredPositionButton = XRCCTRL(*this,"m_InitializeLoadStoredPositionButton",wxButton);
  InitializeStaticText2 = XRCCTRL(*this,"InitializeStaticText2",wxStaticText);
  m_InitializeWarningStaticText = XRCCTRL(*this,"m_InitializeWarningStaticText",wxStaticText);
  m_InitializeHomeMotorsButton = XRCCTRL(*this,"m_InitializeHomeMotorsButton",wxButton);
  m_ClampingPosPanel = XRCCTRL(*this,"m_ClampingPosPanel",wxPanel);
  m_ClampingPositionStaticText = XRCCTRL(*this,"m_ClampingPositionStaticText",wxStaticText);
  m_ClampingPositionSpinCtrl = XRCCTRL(*this,"m_ClampingPositionSpinCtrl",wxSpinCtrlDouble);
  m_ClampingPositionButton = XRCCTRL(*this,"m_ClampingPositionButton",wxButton);
  m_PreloadPanel = XRCCTRL(*this,"m_PreloadPanel",wxPanel);
  m_PreloadUnitRadioBox = XRCCTRL(*this,"m_PreloadUnitRadioBox",wxRadioBox);
  m_PreloadCalculateDiameterPanel = XRCCTRL(*this,"m_PreloadCalculateDiameterPanel",wxPanel);
  m_PreloadCalculateCrosssectionCheckBox = XRCCTRL(*this,"m_PreloadCalculateCrosssectionCheckBox",wxCheckBox);
  m_PreloadYStaticText = XRCCTRL(*this,"m_PreloadYStaticText",wxStaticText);
  m_PreloadYSpinCtrl = XRCCTRL(*this,"m_PreloadYSpinCtrl",wxSpinCtrlDouble);
  m_PreloadXRadioBox = XRCCTRL(*this,"m_PreloadXRadioBox",wxRadioBox);
  m_PreloadXSpinCtrl = XRCCTRL(*this,"m_PreloadXSpinCtrl",wxSpinCtrlDouble);
  m_PreloadLimitStaticText = XRCCTRL(*this,"m_PreloadLimitStaticText",wxStaticText);
  m_PreloadLimitSpinCtrl = XRCCTRL(*this,"m_PreloadLimitSpinCtrl",wxSpinCtrlDouble);
  m_PreloadSpeedStaticText = XRCCTRL(*this,"m_PreloadSpeedStaticText",wxStaticText);
  m_PreloadSpeedPanel = XRCCTRL(*this,"m_PreloadSpeedPanel",wxPanel);
  m_PreloadSpeedPreloadSpinCtrl = XRCCTRL(*this,"m_PreloadSpeedPreloadSpinCtrl",wxSpinCtrlDouble);
  m_PreloadSpeedPreloadStaticText = XRCCTRL(*this,"m_PreloadSpeedPreloadStaticText",wxStaticText);
  m_PreloadSpeedMmSpinCtrl = XRCCTRL(*this,"m_PreloadSpeedMmSpinCtrl",wxSpinCtrlDouble);
  m_PreloadSpeedMmStaticText = XRCCTRL(*this,"m_PreloadSpeedMmStaticText",wxStaticText);
  m_PreloadCancelButton = XRCCTRL(*this,"m_PreloadCancelButton",wxButton);
  m_PreloadSendButton = XRCCTRL(*this,"m_PreloadSendButton",wxButton);
  m_ConditioningPanel = XRCCTRL(*this,"m_ConditioningPanel",wxPanel);
  m_ConditioningCyclesStaticText = XRCCTRL(*this,"m_ConditioningCyclesStaticText",wxStaticText);
  m_ConditioningCyclesSpinCtrl = XRCCTRL(*this,"m_ConditioningCyclesSpinCtrl",wxSpinCtrl);
  m_ConditioningSpeedStaticText = XRCCTRL(*this,"m_ConditioningSpeedStaticText",wxStaticText);
  m_ConditioningSpeedPanel = XRCCTRL(*this,"m_ConditioningSpeedPanel",wxPanel);
  m_ConditioningSpeedPreloadSpinCtrl = XRCCTRL(*this,"m_ConditioningSpeedPreloadSpinCtrl",wxSpinCtrlDouble);
  m_ConditioningSpeedPreloadStaticText = XRCCTRL(*this,"m_ConditioningSpeedPreloadStaticText",wxStaticText);
  m_ConditioningSpeedMmSpinCtrl = XRCCTRL(*this,"m_ConditioningSpeedMmSpinCtrl",wxSpinCtrlDouble);
  m_ConditioningSpeedMMStaticText = XRCCTRL(*this,"m_ConditioningSpeedMMStaticText",wxStaticText);
  m_ConditioningStressForceLimitStaticText = XRCCTRL(*this,"m_ConditioningStressForceLimitStaticText",wxStaticText);
  m_ConditioningStressForceLimitSpinCtrl = XRCCTRL(*this,"m_ConditioningStressForceLimitSpinCtrl",wxSpinCtrlDouble);
  m_ConditioningStressRadioBtn = XRCCTRL(*this,"m_ConditioningStressRadioBtn",wxRadioButton);
  m_ConditioningDistanceRadioBtn = XRCCTRL(*this,"m_ConditioningDistanceRadioBtn",wxRadioButton);
  m_ConditioningDistanceLimitStaticText = XRCCTRL(*this,"m_ConditioningDistanceLimitStaticText",wxStaticText);
  m_ConditioningDistanceLimitSpinCtrl = XRCCTRL(*this,"m_ConditioningDistanceLimitSpinCtrl",wxSpinCtrlDouble);
  m_ConditioningDisctanceLimitRadioBox = XRCCTRL(*this,"m_ConditioningDisctanceLimitRadioBox",wxRadioBox);
  m_ConditioningCancelButton = XRCCTRL(*this,"m_ConditioningCancelButton",wxButton);
  m_ConditioningSendButton = XRCCTRL(*this,"m_ConditioningSendButton",wxButton);
  m_Ramp2FailurePanel = XRCCTRL(*this,"m_Ramp2FailurePanel",wxPanel);
  m_R2FSpeedStaticText = XRCCTRL(*this,"m_R2FSpeedStaticText",wxStaticText);
  m_R2FSpeedPanel = XRCCTRL(*this,"m_R2FSpeedPanel",wxPanel);
  m_R2FSpeedPreloadSpinCtrl = XRCCTRL(*this,"m_R2FSpeedPreloadSpinCtrl",wxSpinCtrlDouble);
  m_R2FSpeedPreloadStaticText = XRCCTRL(*this,"m_R2FSpeedPreloadStaticText",wxStaticText);
  m_R2FSpeedMmSpinCtrl = XRCCTRL(*this,"m_R2FSpeedMmSpinCtrl",wxSpinCtrlDouble);
  m_R2FSpeedMmStaticText = XRCCTRL(*this,"m_R2FSpeedMmStaticText",wxStaticText);
  m_R2FDropBStopStaticText = XRCCTRL(*this,"m_R2FDropBStopStaticText",wxStaticText);
  m_R2FDropBStopSpinCtrl = XRCCTRL(*this,"m_R2FDropBStopSpinCtrl",wxSpinCtrlDouble);
  m_R2FAfterFailureStaticText = XRCCTRL(*this,"m_R2FAfterFailureStaticText",wxStaticText);
  m_R2FAfterFailureRadioBox = XRCCTRL(*this,"m_R2FAfterFailureRadioBox",wxRadioBox);
  m_R2FGoToSpinCtrl = XRCCTRL(*this,"m_R2FGoToSpinCtrl",wxSpinCtrlDouble);
  m_R2FGoToRadioBox = XRCCTRL(*this,"m_R2FGoToRadioBox",wxRadioBox);
  m_R2FCancelButton = XRCCTRL(*this,"m_R2FCancelButton",wxButton);
  m_R2FSendButton = XRCCTRL(*this,"m_R2FSendButton",wxButton);
  m_RelaxationPanel = XRCCTRL(*this,"m_RelaxationPanel",wxPanel);
  m_RelaxationRampStaticText = XRCCTRL(*this,"m_RelaxationRampStaticText",wxStaticText);
  m_RelaxationRampSpinCtrl = XRCCTRL(*this,"m_RelaxationRampSpinCtrl",wxSpinCtrlDouble);
  m_RelaxationRampRadioBox = XRCCTRL(*this,"m_RelaxationRampRadioBox",wxRadioBox);
  m_staticText321 = XRCCTRL(*this,"m_staticText321",wxStaticText);
  m_RelaxationPauseStaticText = XRCCTRL(*this,"m_RelaxationPauseStaticText",wxStaticText);
  m_RelaxationPauseSpinCtrl = XRCCTRL(*this,"m_RelaxationPauseSpinCtrl",wxSpinCtrlDouble);
  m_RelaxationStepsStaticText = XRCCTRL(*this,"m_RelaxationStepsStaticText",wxStaticText);
  m_RelaxationStepsSpinCtrl = XRCCTRL(*this,"m_RelaxationStepsSpinCtrl",wxSpinCtrl);
  m_RelaxationCancelButton = XRCCTRL(*this,"m_RelaxationCancelButton",wxButton);
  m_RelaxationSendButton = XRCCTRL(*this,"m_RelaxationSendButton",wxButton);
  m_CreepPanel = XRCCTRL(*this,"m_CreepPanel",wxPanel);
  m_CreepSpeedStaticText = XRCCTRL(*this,"m_CreepSpeedStaticText",wxStaticText);
  m_CreepSpeedPanel = XRCCTRL(*this,"m_CreepSpeedPanel",wxPanel);
  m_CreepSpeedPreloadSpinCtrl = XRCCTRL(*this,"m_CreepSpeedPreloadSpinCtrl",wxSpinCtrlDouble);
  m_CreepSpeedPreloadStaticText = XRCCTRL(*this,"m_CreepSpeedPreloadStaticText",wxStaticText);
  m_CreepSpeedMmSpinCtrl = XRCCTRL(*this,"m_CreepSpeedMmSpinCtrl",wxSpinCtrlDouble);
  m_CreepSpeedMmStaticText = XRCCTRL(*this,"m_CreepSpeedMmStaticText",wxStaticText);
  m_CreepHoldForceStressStaticText = XRCCTRL(*this,"m_CreepHoldForceStressStaticText",wxStaticText);
  m_CreepHoldForceStressSpinCtrl = XRCCTRL(*this,"m_CreepHoldForceStressSpinCtrl",wxSpinCtrlDouble);
  m_CreepHoldTimeStaticText = XRCCTRL(*this,"m_CreepHoldTimeStaticText",wxStaticText);
  m_CreepHoldTimeSpinCtrl = XRCCTRL(*this,"m_CreepHoldTimeSpinCtrl",wxSpinCtrlDouble);
  m_CreepSensitivityStaticText = XRCCTRL(*this,"m_CreepSensitivityStaticText",wxStaticText);
  m_CreepSensitivitySpinCtrl = XRCCTRL(*this,"m_CreepSensitivitySpinCtrl",wxSpinCtrlDouble);
  m_CreepCancelButton = XRCCTRL(*this,"m_CreepCancelButton",wxButton);
  m_CreepSendButton = XRCCTRL(*this,"m_CreepSendButton",wxButton);
  m_FatiguePanel = XRCCTRL(*this,"m_FatiguePanel",wxPanel);
  m_FatigueCyclesStaticText = XRCCTRL(*this,"m_FatigueCyclesStaticText",wxStaticText);
  m_FatigueCyclesSpinCtrl = XRCCTRL(*this,"m_FatigueCyclesSpinCtrl",wxSpinCtrl);
  m_FatigueTotalTimeStaticText = XRCCTRL(*this,"m_FatigueTotalTimeStaticText",wxStaticText);
  m_FatigueTotalTimeSpinCtrl = XRCCTRL(*this,"m_FatigueTotalTimeSpinCtrl",wxSpinCtrlDouble);
  m_FatigueAmplitudeTimeStaticText = XRCCTRL(*this,"m_FatigueAmplitudeTimeStaticText",wxStaticText);
  m_FatigueAmplitudeSpinCtrl = XRCCTRL(*this,"m_FatigueAmplitudeSpinCtrl",wxSpinCtrlDouble);
  m_FatigueAmplitudeRadioBox = XRCCTRL(*this,"m_FatigueAmplitudeRadioBox",wxRadioBox);
  m_staticText33 = XRCCTRL(*this,"m_staticText33",wxStaticText);
  m_FatigueRestTimeStaticText = XRCCTRL(*this,"m_FatigueRestTimeStaticText",wxStaticText);
  m_FatigueRestTimeSpinCtrl = XRCCTRL(*this,"m_FatigueRestTimeSpinCtrl",wxSpinCtrlDouble);
  m_FatigueFrequencyStaticText = XRCCTRL(*this,"m_FatigueFrequencyStaticText",wxStaticText);
  m_FatigueFrequencySpinCtrl = XRCCTRL(*this,"m_FatigueFrequencySpinCtrl",wxSpinCtrlDouble);
  m_FatigueLoopCheckBox = XRCCTRL(*this,"m_FatigueLoopCheckBox",wxCheckBox);
  m_FatigueCancelButton = XRCCTRL(*this,"m_FatigueCancelButton",wxButton);
  m_FatigueSendButton = XRCCTRL(*this,"m_FatigueSendButton",wxButton);
  m_ChamberStretchPanel = XRCCTRL(*this,"m_ChamberStretchPanel",wxPanel);
  m_ChamberStretchMeasurementRadioBox = XRCCTRL(*this,"m_ChamberStretchMeasurementRadioBox",wxRadioBox);
  m_ChamberStretchGelPanel = XRCCTRL(*this,"m_ChamberStretchGelPanel",wxPanel);
  m_ChamberStretchEmodLeftStaticText = XRCCTRL(*this,"m_ChamberStretchEmodLeftStaticText",wxStaticText);
  m_ChamberStretchEmodLeftSpinCtrl = XRCCTRL(*this,"m_ChamberStretchEmodLeftSpinCtrl",wxSpinCtrlDouble);
  m_ChamberStretchEmodRightStaticText = XRCCTRL(*this,"m_ChamberStretchEmodRightStaticText",wxStaticText);
  m_ChamberStretchEmodRightSpinCtrl = XRCCTRL(*this,"m_ChamberStretchEmodRightSpinCtrl",wxSpinCtrlDouble);
  m_ChamberStretchStrinStaticText = XRCCTRL(*this,"m_ChamberStretchStrinStaticText",wxStaticText);
  m_ChamberStretchStrainSpinCtrl = XRCCTRL(*this,"m_ChamberStretchStrainSpinCtrl",wxSpinCtrlDouble);
  m_ChamberStretchFreqStaticText = XRCCTRL(*this,"m_ChamberStretchFreqStaticText",wxStaticText);
  m_ChamberStretchFreqSpinCtrl = XRCCTRL(*this,"m_ChamberStretchFreqSpinCtrl",wxSpinCtrlDouble);
  m_ChamberStretchAmplStaticText = XRCCTRL(*this,"m_ChamberStretchAmplStaticText",wxStaticText);
  m_ChamberStretchAmplSpinCtrl = XRCCTRL(*this,"m_ChamberStretchAmplSpinCtrl",wxSpinCtrlDouble);
  m_ChamberStretchRateStaticText = XRCCTRL(*this,"m_ChamberStretchRateStaticText",wxStaticText);
  m_ChamberStretchRateSpinCtrl = XRCCTRL(*this,"m_ChamberStretchRateSpinCtrl",wxSpinCtrlDouble);
  m_ChamberStretchPauseStaticText = XRCCTRL(*this,"m_ChamberStretchPauseStaticText",wxStaticText);
  m_ChamberStretchPauseSpinCtrl = XRCCTRL(*this,"m_ChamberStretchPauseSpinCtrl",wxSpinCtrlDouble);
  m_ChamberStretchImageCheckBox = XRCCTRL(*this,"m_ChamberStretchImageCheckBox",wxCheckBox);
  m_ChamberStretchCellsPanel = XRCCTRL(*this,"m_ChamberStretchCellsPanel",wxPanel);
  m_ChamberStretchCyclesStaticText1 = XRCCTRL(*this,"m_ChamberStretchCyclesStaticText1",wxStaticText);
  m_ChamberStretchCyclesSpinCtrl1 = XRCCTRL(*this,"m_ChamberStretchCyclesSpinCtrl1",wxSpinCtrl);
  m_ChamberStretchTotalTimeStaticText1 = XRCCTRL(*this,"m_ChamberStretchTotalTimeStaticText1",wxStaticText);
  m_ChamberStretchTotalTimeSpinCtrl1 = XRCCTRL(*this,"m_ChamberStretchTotalTimeSpinCtrl1",wxSpinCtrlDouble);
  m_ChamberStretchAmplitudeTimeStaticText1 = XRCCTRL(*this,"m_ChamberStretchAmplitudeTimeStaticText1",wxStaticText);
  m_ChamberStretchAmplitudeSpinCtrl1 = XRCCTRL(*this,"m_ChamberStretchAmplitudeSpinCtrl1",wxSpinCtrlDouble);
  m_ChamberStretchAmplitudeRadioBox1 = XRCCTRL(*this,"m_ChamberStretchAmplitudeRadioBox1",wxRadioBox);
  m_ChamberStretchText331 = XRCCTRL(*this,"m_ChamberStretchText331",wxStaticText);
  m_ChamberStretchRestTimeStaticText1 = XRCCTRL(*this,"m_ChamberStretchRestTimeStaticText1",wxStaticText);
  m_ChamberStretchRestTimeSpinCtrl1 = XRCCTRL(*this,"m_ChamberStretchRestTimeSpinCtrl1",wxSpinCtrlDouble);
  m_ChamberStretchFrequencyStaticText1 = XRCCTRL(*this,"m_ChamberStretchFrequencyStaticText1",wxStaticText);
  m_ChamberStretchFrequencySpinCtrl1 = XRCCTRL(*this,"m_ChamberStretchFrequencySpinCtrl1",wxSpinCtrlDouble);
  m_ChamberStretchLoopCheckBox1 = XRCCTRL(*this,"m_ChamberStretchLoopCheckBox1",wxCheckBox);
  m_ChamberStretchCancelButton = XRCCTRL(*this,"m_ChamberStretchCancelButton",wxButton);
  m_ChamberStretchSendButton = XRCCTRL(*this,"m_ChamberStretchSendButton",wxButton);
  m_ChamberStretchSizer1 = static_cast<wxFlexGridSizer*>(m_ChamberStretchGelPanel->GetContainingSizer());
  m_DecreaseDistanceButton = XRCCTRL(*this,"m_DecreaseDistanceButton",wxButton);
  m_IncreaseDistanceButton = XRCCTRL(*this,"m_IncreaseDistanceButton",wxButton);
  m_StopButton = XRCCTRL(*this,"m_StopButton",wxButton);
  m_ForceStaticText = XRCCTRL(*this,"m_ForceStaticText",wxStaticText);
  m_DistanceStaticText = XRCCTRL(*this,"m_DistanceStaticText",wxStaticText);
  m_Protocols = XRCCTRL(*this,"m_Protocols",wxPanel);
  m_ProtocolsListBox = XRCCTRL(*this,"m_ProtocolsListBox",wxListBox);
  m_ProtocolsNavigationPanel = XRCCTRL(*this,"m_ProtocolsNavigationPanel",wxPanel);
  m_ProtocolsExperiment1Button = XRCCTRL(*this,"m_ProtocolsExperiment1Button",wxButton);
  m_staticText32 = XRCCTRL(*this,"m_staticText32",wxStaticText);
  m_ProtocolsPauseButton = XRCCTRL(*this,"m_ProtocolsPauseButton",wxButton);
  m_ProtocolsExperiment2Button = XRCCTRL(*this,"m_ProtocolsExperiment2Button",wxButton);
  m_ProtocolsUpButton = XRCCTRL(*this,"m_ProtocolsUpButton",wxButton);
  m_ProtocolsPhotoButton = XRCCTRL(*this,"m_ProtocolsPhotoButton",wxButton);
  m_ProtocolsExperiment3Button = XRCCTRL(*this,"m_ProtocolsExperiment3Button",wxButton);
  m_ProtocolsXButton = XRCCTRL(*this,"m_ProtocolsXButton",wxButton);
  m_staticText324 = XRCCTRL(*this,"m_staticText324",wxStaticText);
  m_ProtocolsExperiment4Button = XRCCTRL(*this,"m_ProtocolsExperiment4Button",wxButton);
  m_ProtocolsDownButton = XRCCTRL(*this,"m_ProtocolsDownButton",wxButton);
  m_staticText325 = XRCCTRL(*this,"m_staticText325",wxStaticText);
  m_ProtocolsExperiment5Button = XRCCTRL(*this,"m_ProtocolsExperiment5Button",wxButton);
  m_checkBox3 = XRCCTRL(*this,"m_checkBox3",wxCheckBox);
  m_staticText326 = XRCCTRL(*this,"m_staticText326",wxStaticText);
  m_ProtocolsRunButton = XRCCTRL(*this,"m_ProtocolsRunButton",wxButton);
  m_ProtocolsStopButton = XRCCTRL(*this,"m_ProtocolsStopButton",wxButton);
  m_ProtocolsSaveButton = XRCCTRL(*this,"m_ProtocolsSaveButton",wxButton);
  m_Results = XRCCTRL(*this,"m_Results",wxScrolledWindow);
  m_ResultListCtrl = XRCCTRL(*this,"m_ResultListCtrl",wxListCtrl);
  m_ResultSaveButton = XRCCTRL(*this,"m_ResultSaveButton",wxButton);
  m_GraphPanel = XRCCTRL(*this,"m_GraphPanel",wxPanel);
  m_GraphExportCSVButton = XRCCTRL(*this,"m_GraphExportCSVButton",wxButton);
  m_GraphExportPNGButton = XRCCTRL(*this,"m_GraphExportPNGButton",wxButton);
  m_GraphClearButton = XRCCTRL(*this,"m_GraphClearButton",wxButton);
  m_GraphSizer2 = static_cast<wxBoxSizer*>(m_GraphExportCSVButton->GetContainingSizer());
  m_GraphSizer1 = static_cast<wxBoxSizer*>(m_GraphPanel->GetSizer());
 }
public:
MyFrame_Base(const wxString& title, wxWindow *parent=NULL){
  InitWidgetsFromXRC((wxWindow *)parent);
 }
};

void InitXmlResource();
#endif
